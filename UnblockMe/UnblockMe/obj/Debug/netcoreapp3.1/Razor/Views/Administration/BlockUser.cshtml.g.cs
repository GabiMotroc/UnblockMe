#pragma checksum "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "80abf668b7933f34c2c057f1fe310a1ef61f5aac"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Administration_BlockUser), @"mvc.1.0.view", @"/Views/Administration/BlockUser.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\Projects\Git\UnblockMe\UnblockMe\Views\_ViewImports.cshtml"
using UnblockMe;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\Projects\Git\UnblockMe\UnblockMe\Views\_ViewImports.cshtml"
using UnblockMe.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"80abf668b7933f34c2c057f1fe310a1ef61f5aac", @"/Views/Administration/BlockUser.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9da95a8eb7ebad05f369e90021df8c2247ebe8a2", @"/Views/_ViewImports.cshtml")]
    public class Views_Administration_BlockUser : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<UnblockMe.Models.BlockUserViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/radialTmePicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n\r\n");
#nullable restore
#line 4 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
  
    ViewBag.Title = "BlockUser";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<ul>\r\n    <li>");
#nullable restore
#line 9 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
   Write(Model.Email);

#line default
#line hidden
#nullable disable
            WriteLiteral("</li>\r\n    <li>");
#nullable restore
#line 10 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
   Write(Model.Username);

#line default
#line hidden
#nullable disable
            WriteLiteral("</li>\r\n    <li>\r\n");
#nullable restore
#line 12 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
         using (Html.BeginForm("BlockUser", "Administration", FormMethod.Post))
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <input type=\"hidden\" name=\"BlockedId\"");
            BeginWriteAttribute("value", " value=\"", 305, "\"", 326, 1);
#nullable restore
#line 14 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
WriteAttributeValue("", 313, Model.UserId, 313, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\r\n            <button type=\"submit\">Block for 1 day</button>\r\n");
#nullable restore
#line 16 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("    </li>\r\n</ul>\r\n\r\n");
#nullable restore
#line 20 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
 if (Model.Bans.Any())
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <h3>Previous Bans</h3>\r\n");
#nullable restore
#line 23 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
    foreach (var ban in Model.Bans)
    {
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
   Write(ban.StartTime);

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "F:\Projects\Git\UnblockMe\UnblockMe\Views\Administration\BlockUser.cshtml"
                      
    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>
        #mydiv {
            position: absolute;
            z-index: 9;
            background-color: #f1f1f1;
            text-align: center;
            border: 1px solid #d3d3d3;
        }

        #mydivheader {
            padding: 10px;
            cursor: move;
            z-index: 10;
            background-color: #2196F3;
            color: #fff;
        }

        .radialTimePicker {
            width: 400px;
            height: 400px;
            min-width: 400px;
            min-height: 400px;
        }

        .dot {
            top: 0px;
            left: calc(50% - 10px);
            height: 25px;
            width: 25px;
            background-color: #ff0000;
            border-radius: 50%;
            transform-origin: 50% 20px;
        }

        #radialTimePicker {
            left: calc(50% - 200px);
            width: 400px;
            height: 400px;
            min-width: 400px;
            min-height: 400px;
            position: relati");
            WriteLiteral(@"ve;
/*            background: green;*/
        }

        .knob {
            width: 25px;
            height: 200px;
            margin: 0 auto;
            position: relative;
/*            background: blue;*/
            transform-origin: 50% 100%;
            transform: rotate(0deg);
        }

        .dot {
            top: 0px;
            left: calc(50% - 10px);
            height: 25px;
            width: 25px;
            background-color: #ff0000;
            border-radius: 50%;
            display: inline-block;
            z-index: 2;
            pointer-events: none;
        }

        .kno:hover {
            transform: rotate(360deg);
            animation: custom-flip 1s ease-in-out infinite alternate;
        }
    ");
            WriteLiteral(@"@keyframes custom-flip
        {
            50% {
                transform: rotate(360deg);
            }
            100% {
                transform: rotate(0deg);
            }
        }
</style>

<div id=""radialTimePicker"">
    <div id=""knob"" class=""knob"">
        <span class=""dot""></span>
    </div>
</div>

");
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "80abf668b7933f34c2c057f1fe310a1ef61f5aac8269", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<script>
    //Make the DIV element draggagle:
    dragElement(document.getElementById(""mydiv""));


    function dragElement(elmnt) {
        var size = 150;
        var centerX = elmnt.offsetLeft, centerY = elmnt.offsetTop;
        var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;

        if (document.getElementById(elmnt.id + ""header"")) {
            /* if present, the header is where you move the DIV from:*/
            document.getElementById(elmnt.id + ""header"").onmousedown = dragMouseDown;
        } else {
            /* otherwise, move the DIV from anywhere inside the DIV:*/
            elmnt.onmousedown = dragMouseDown;
        }

        function dragMouseDown(e) {
            e = e || window.event;
            e.preventDefault();
            // get the mouse cursor position at startup:
            pos3 = e.clientX;
            pos4 = e.clientY;
            document.onmouseup = closeDragElement;
            // call a function whenever the cursor moves:
            document.on");
            WriteLiteral(@"mousemove = elementDrag;
        }

        function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            // set the element's new position:
            //elmnt.style.top = clampY((elmnt.offsetTop - pos2)) + ""px"";
            //elmnt.style.left = clampX((elmnt.offsetLeft - pos1)) + ""px"";
            let coordinates = calculatePos(pos3 - centerX, pos4 - centerY, size);

            elmnt.style.left = coordinates[0] + centerX + ""px"";
            elmnt.style.top = coordinates[1] + centerY + ""px"";
        }

        function closeDragElement() {
            /* stop moving when mouse button is released:*/
            document.onmouseup = null;
            document.onmousemove = null;
        }

        function clampX(e) {
            if (e > centerX + 500)
      ");
            WriteLiteral(@"          return centerX + 500;
            if (e < centreX - 500)
                return centerX - 500;
            return e;
        }

        function clampY(e) {
            if (e > centreY + 500)
                return centerY + 500;
            if (e < centerY - 500)
                return centerY - 500;
            return e;
        }

        function clamp(e, limit) {
            if (e > centerY + limit)
                return centerY + limit;
            if (e < centerY - limit)
                return centerY - limit;
            return e;
        }

        function calculatePos(x, y, size) {
            var cos = cosOf2Vectors(x, y, 1, 0);
            var sin = Math.sqrt(1 - cos * cos);

            if ((x - centerX > 0) && (y - centerY < 0)) {
                sin -= sin;
            }

            if ((x - centerX < 0) && (y - centerY < 0)) {
                sin -= sin;
            }

            return [cos * size, sin * size];
        }

        function co");
            WriteLiteral(@"sOf2Vectors(x1, y1, x2, y2) {
            return dotProduct(x1, y1, x2, y2) / magnitude(x1, y1) * magnitude(x2, y2);
        }

        function dotProduct(x1, y1, x2, y2) {
            return x1 * x2 + y1 * y2;
        }

        function magnitude(x, y) {
            return Math.sqrt(x * x + y * y);
        }
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<UnblockMe.Models.BlockUserViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
